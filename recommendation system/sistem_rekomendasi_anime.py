# -*- coding: utf-8 -*-
"""Sistem Rekomendasi Anime.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pu0eIfgXEbHY4a-ZFu3B1-Ms3gHjjk64

# Anime Recommendation Content Based Filtering

## Data Collection


#### Sumber Dataset : https://www.kaggle.com/datasets/CooperUnion/anime-recommendations-database
"""

import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns

anime = pd.read_csv('/content/anime.csv')
anime_rating = pd.read_csv('/content/rating.csv')

"""## Data Understanding

"""

anime

anime_rating

"""# Univariate Exploratory Data Analysis"""

print('Jumlah data judul anime: ', len(anime.anime_id.unique()))
print('Jumlah data genre anime: ', len(anime.genre.unique()))
print('Jumlah data user: ', len(anime_rating.user_id.unique()))

print('Jenis Genre ', anime.genre.unique())

anime.info()

anime.head()

anime.describe()

import matplotlib.pyplot as plt


plt.figure(figsize=(10, 6))
sns.countplot(y='genre', data=anime, order=anime['genre'].value_counts().index[:10])
plt.title('Top 10 Anime Genres')
plt.xlabel('Count')
plt.ylabel('Genre')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(anime['rating'], bins=30, kde=True)
plt.title('Distribution of Anime Ratings')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.show()

# Contoh grafik 6: Heatmap Korelasi
plt.figure(figsize=(8, 6))
sns.heatmap(anime.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

# @title type

from matplotlib import pyplot as plt
import seaborn as sns
anime.groupby('type').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

import matplotlib.pyplot as plt

# Kelompokkan data berdasarkan judul anime dan hitung rata-rata peringkat
average_ratings = anime.groupby('name')['rating'].mean().reset_index()

# Sortir dataframe berdasarkan peringkat rata-rata dari tinggi ke rendah
top_10_anime = average_ratings.sort_values(by='rating', ascending=False).head(10)

# Visualisasi
plt.figure(figsize=(10, 6))
plt.barh(top_10_anime['name'], top_10_anime['rating'], color='skyblue')
plt.xlabel('Average Rating')
plt.title('Top 10 Anime based on Average Rating')
plt.gca().invert_yaxis()  # Untuk mengurutkan dari rating tertinggi ke terendah
plt.show()

anime_rating.head()

anime_rating.info()

anime_rating.describe()

import numpy as np

user_all = np.sort(np.unique(anime_rating))

print('Jumlah seluruh user: ', len(user_all))

# Count anime rating contribution
anime_rating_contribution = anime_rating.groupby('anime_id').count()
anime_rating_contribution.head(3)

"""# Data Preprocessing"""

# Menggabungkan table anime rating contribution dengan dataframe anime berdasarkan anime_id
all_anime_name = pd.merge(anime_rating_contribution, anime[['anime_id','name','genre']], on='anime_id', how='left')
# Print dataframe all_anime_name
all_anime_name.head(10)

all_anime_name.sort_values(by='rating', ascending=False).head(10)

anime_info_merged = all_anime_name

"""# Data Preparation"""

# Cek missing value dengan fungsi isnull()
anime_info_merged.isnull().sum()

# Membersihkan missing value dengan fungsi dropna()
anime_info_merged = anime_info_merged.dropna()
anime_info_merged

anime_info_merged.isnull().sum()

# Mengurutkan anime berdasarkan anime id kemudian memasukkannya ke dalam variabel fix_anime
fix_anime = anime_info_merged.sort_values('anime_id', ascending=True)
fix_anime

# Membuang data duplikat pada variabel preparation
fix_anime = fix_anime.drop_duplicates('anime_id')
fix_anime

# Mengecek berapa jumlah fix_anime
len(fix_anime.anime_id.unique())

fix_anime.genre.unique()

fix_anime['genre'].nunique()

# Mengonversi data series ‘anime_id’ menjadi dalam bentuk list
anime_id = fix_anime['anime_id'].tolist()

# Mengonversi data series ‘anime Name’ menjadi dalam bentuk list
anime_name = fix_anime['name'].tolist()

# Mengonversi data series ‘genre’ menjadi dalam bentuk list
anime_genre = fix_anime['genre'].tolist()

print(len(anime_id))
print(len(anime_name))
print(len(anime_genre))

anime_new = pd.DataFrame({
    'id': anime_id,
    'anime_name': anime_name,
    'genre': anime_genre
})
anime_new

data = anime_new
data.sample(5)

"""# Modelling"""

from sklearn.feature_extraction.text import TfidfVectorizer

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data cuisine
tf.fit(data['genre'])

# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names_out()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(data['genre'])

# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan genre anime
# Baris diisi dengan nama anime

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data.anime_name
).sample(22, axis=1).sample(10, axis=0)

from sklearn.metrics.pairwise import cosine_similarity

# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama anime
cosine_sim_df = pd.DataFrame(cosine_sim, index=data['anime_name'], columns=data['anime_name'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap anime
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

def anime_recommendations(nama_anime, similarity_data=cosine_sim_df, items=data[['anime_name', 'genre']], k=5):
    """
    Rekomendasi Anime berdasarkan kemiripan dataframe

    Parameter:
    ---
    nama_anime : tipe data string (str)
                Nama Anime (index kemiripan dataframe)
    similarity_data : tipe data pd.DataFrame (object)
                      Kesamaan dataframe, simetrik, dengan anime sebagai
                      indeks dan kolom
    items : tipe data pd.DataFrame (object)
            Mengandung kedua nama dan fitur lainnya yang digunakan untuk mendefinisikan kemiripan
    k : tipe data integer (int)
        Banyaknya jumlah rekomendasi yang diberikan
    ---


    Pada index ini, kita mengambil k dengan nilai similarity terbesar
    pada index matrix yang diberikan (i).
    """


    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,nama_anime].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Drop nama_anime agar nama anime yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(nama_anime, errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

data[data.anime_name.eq('Gintama°')]

# Mendapatkan rekomendasi
anime_recommendations('Gintama°')